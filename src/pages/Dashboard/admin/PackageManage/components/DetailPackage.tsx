import { Package, PackageParams, useUpdatePackageMutation } from '@/redux/services/packageApi'
import { Button } from '@/components/ui/button'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Badge } from '@/components/ui/badge'
import { useState } from 'react'
import { FormProvider, useForm } from 'react-hook-form'
import { yupResolver } from '@hookform/resolvers/yup'
import * as yup from 'yup'
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'
import { X } from 'lucide-react'
import { toast } from 'react-toastify'
import { bufferToHex, formatCurrency } from '@/utils/utils'

interface DetailPackageProps {
  pkg: Package
  onClose?: () => void
}

const packageFormSchema = yup.object({
  name: yup.string().min(2, 'T√™n g√≥i ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±').required('T√™n g√≥i l√† b·∫Øt bu·ªôc'),
  description: yup.string().min(5, 'M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±').required('M√¥ t·∫£ l√† b·∫Øt bu·ªôc'),
  appointmentCount: yup.number().min(1, 'S·ªë l∆∞·ª£t kh√°m ph·∫£i l·ªõn h∆°n 0').required('S·ªë l∆∞·ª£t kh√°m l√† b·∫Øt bu·ªôc'),
  price: yup.number().min(1000, 'Gi√° ti·ªÅn ph·∫£i l·ªõn h∆°n 1.000 VND').required('Gi√° ti·ªÅn l√† b·∫Øt bu·ªôc'),
  isActive: yup.boolean().required('Tr·∫°ng th√°i l√† b·∫Øt bu·ªôc'),
  validityPeriod: yup.number().min(1, 'Th·ªùi h·∫°n ph·∫£i l·ªõn h∆°n 0 ng√†y').required('Th·ªùi h·∫°n l√† b·∫Øt bu·ªôc'),
  features: yup.array().of(yup.string()).min(1, 'Ph·∫£i c√≥ √≠t nh·∫•t 1 t√≠nh nƒÉng').required('T√≠nh nƒÉng l√† b·∫Øt bu·ªôc')
})

export default function DetailPackage({ pkg, onClose }: DetailPackageProps) {
  const [updatePackage, { isLoading }] = useUpdatePackageMutation()
  const [newFeature, setNewFeature] = useState('')

  const methods = useForm<PackageParams>({
    resolver: yupResolver(packageFormSchema) as any,
    defaultValues: {
      name: pkg.name,
      description: pkg.description,
      appointmentCount: pkg.appointmentCount,
      price: pkg.price,
      isActive: pkg.isActive,
      validityPeriod: pkg.validityPeriod,
      features: pkg.features
    }
  })

  const { handleSubmit, control, watch, setValue } = methods
  const features = watch('features')

  const onSubmit = async (data: PackageParams) => {
    try {
      const response = await updatePackage({
        id: bufferToHex(pkg._id),
        body: data
      })
      if ('data' in response) {
        toast.success(`ƒê√£ c·∫≠p nh·∫≠t g√≥i kh√°m: ${data.name}`)
        onClose?.()
      }
    } catch (error) {
      console.log('error', error)
    }
  }

  const addFeature = () => {
    if (newFeature.trim() && !features.includes(newFeature.trim())) {
      setValue('features', [...features, newFeature.trim()])
      setNewFeature('')
    }
  }

  const removeFeature = (index: number) => {
    setValue(
      'features',
      features.filter((_, i) => i !== index)
    )
  }

  return (
    <Tabs defaultValue='info' className='w-full'>
      <TabsList>
        <TabsTrigger value='info'>Th√¥ng tin</TabsTrigger>
        <TabsTrigger value='edit'>Ch·ªânh s·ª≠a</TabsTrigger>
      </TabsList>
      <TabsContent value='info' className='p-4'>
        <div className='space-y-6'>
          <div>
            <h3 className='text-lg font-semibold'>Th√¥ng tin c∆° b·∫£n</h3>
            <div className='grid grid-cols-2 gap-4 mt-2'>
              <div>
                <p className='text-sm text-gray-500'>T√™n g√≥i</p>
                <p className='font-medium'>{pkg.name}</p>
              </div>
              <div>
                <p className='text-sm text-gray-500'>Gi√° ti·ªÅn</p>
                <p className='font-medium'>{formatCurrency(pkg.price)}</p>
              </div>
              <div>
                <p className='text-sm text-gray-500'>S·ªë l∆∞·ª£t kh√°m</p>
                <p className='font-medium'>{pkg.appointmentCount} l∆∞·ª£t</p>
              </div>
              <div>
                <p className='text-sm text-gray-500'>Th·ªùi h·∫°n</p>
                <p className='font-medium'>{pkg.validityPeriod} ng√†y</p>
              </div>
              <div>
                <p className='text-sm text-gray-500'>Tr·∫°ng th√°i</p>
                <Badge
                  className={`${pkg.isActive ? 'bg-primary/5 text-primary border-primary' : 'text-red-500 border-red-500 bg-red-50/90'} mt-1`}
                  variant='outline'
                >
                  {pkg.isActive ? 'üü¢ Ho·∫°t ƒë·ªông' : 'üî¥ Ng·ª´ng ho·∫°t ƒë·ªông'}
                </Badge>
              </div>
            </div>
          </div>

          <div>
            <h3 className='text-lg font-semibold'>M√¥ t·∫£</h3>
            <p className='mt-2'>{pkg.description}</p>
          </div>

          <div>
            <h3 className='text-lg font-semibold'>T√≠nh nƒÉng</h3>
            <div className='flex flex-wrap gap-2 mt-2'>
              {pkg.features.map((feature, index) => (
                <Badge key={index} variant='outline' className='text-sm'>
                  {feature}
                </Badge>
              ))}
            </div>
          </div>

          <div>
            <h3 className='text-lg font-semibold'>Th√¥ng tin th√™m</h3>
            <div className='grid grid-cols-2 gap-4 mt-2'>
              <div>
                <p className='text-sm text-gray-500'>Ng√†y t·∫°o</p>
                <p className='font-medium'>{new Date(pkg.createdAt).toLocaleString('vi-VN')}</p>
              </div>
              <div>
                <p className='text-sm text-gray-500'>C·∫≠p nh·∫≠t l·∫ßn cu·ªëi</p>
                <p className='font-medium'>{new Date(pkg.updatedAt).toLocaleString('vi-VN')}</p>
              </div>
            </div>
          </div>
        </div>
      </TabsContent>

      <TabsContent value='edit'>
        <FormProvider {...methods}>
          <form onSubmit={handleSubmit(onSubmit)} className='p-4 space-y-6'>
            <div className='grid grid-cols-2 gap-4'>
              <FormField
                control={control}
                name='name'
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>T√™n g√≥i</FormLabel>
                    <FormControl>
                      <Input placeholder='Nh·∫≠p t√™n g√≥i' {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={control}
                name='price'
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Gi√° ti·ªÅn (VND)</FormLabel>
                    <FormControl>
                      <Input type='number' min={0} placeholder='Nh·∫≠p gi√° ti·ªÅn' {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={control}
                name='appointmentCount'
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>S·ªë l∆∞·ª£t kh√°m</FormLabel>
                    <FormControl>
                      <Input type='number' min={1} placeholder='Nh·∫≠p s·ªë l∆∞·ª£t kh√°m' {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={control}
                name='validityPeriod'
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Th·ªùi h·∫°n (ng√†y)</FormLabel>
                    <FormControl>
                      <Input type='number' min={1} placeholder='Nh·∫≠p th·ªùi h·∫°n' {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={control}
              name='description'
              render={({ field }) => (
                <FormItem>
                  <FormLabel>M√¥ t·∫£</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder='Nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ g√≥i kh√°m'
                      className='resize-none min-h-[100px]'
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={control}
              name='isActive'
              render={({ field }) => (
                <FormItem className='space-y-3'>
                  <FormLabel>Tr·∫°ng th√°i</FormLabel>
                  <FormControl>
                    <RadioGroup
                      onValueChange={(value: string) => field.onChange(value === 'true')}
                      defaultValue={field.value ? 'true' : 'false'}
                      className='flex flex-row space-x-4'
                    >
                      <FormItem className='flex items-center space-x-2 space-y-0'>
                        <FormControl>
                          <RadioGroupItem value='true' />
                        </FormControl>
                        <FormLabel className='cursor-pointer'>Ho·∫°t ƒë·ªông</FormLabel>
                      </FormItem>
                      <FormItem className='flex items-center space-x-2 space-y-0'>
                        <FormControl>
                          <RadioGroupItem value='false' />
                        </FormControl>
                        <FormLabel className='cursor-pointer'>Ng·ª´ng ho·∫°t ƒë·ªông</FormLabel>
                      </FormItem>
                    </RadioGroup>
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={control}
              name='features'
              render={() => (
                <FormItem>
                  <FormLabel>T√≠nh nƒÉng</FormLabel>
                  <div className='space-y-4'>
                    <div className='flex space-x-2'>
                      <Input
                        placeholder='Th√™m t√≠nh nƒÉng m·ªõi (Enter ƒë·ªÉ th√™m)'
                        value={newFeature}
                        onChange={(e) => setNewFeature(e.target.value)}
                        onKeyDown={(e) => e.key === 'Enter' && (e.preventDefault(), addFeature())}
                      />
                    </div>
                    <div className='flex flex-wrap gap-2'>
                      {features.map((feature, index) => (
                        <Badge key={index} variant='secondary' className='px-3 py-1 text-sm'>
                          {feature}
                          <X className='ml-2 w-3 h-3 cursor-pointer' onClick={() => removeFeature(index)} />
                        </Badge>
                      ))}
                    </div>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className='flex justify-end space-x-2'>
              <Button type='button' variant='outline' onClick={onClose}>
                H·ªßy
              </Button>
              <Button type='submit' disabled={isLoading}>
                {isLoading ? 'ƒêang l∆∞u...' : 'C·∫≠p nh·∫≠t'}
              </Button>
            </div>
          </form>
        </FormProvider>
      </TabsContent>
    </Tabs>
  )
}
